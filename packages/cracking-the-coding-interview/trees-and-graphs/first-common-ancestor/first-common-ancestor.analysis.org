* Doc va phan tich yeu cau
Input: 2 nodes g, h o trong binary tree
Output: node dau tien la to tien cua ca 2 node g, h

* TDD: Setup test case
Done

* Dua ra brute force solution/ y tuong
Co 3 cau hoi ta can dat ra vi no anh huong truc tiep den y tuong/solution

Cach 1. Neu nhu BinaryTree co link den parent node
Trong truong hop nay, ta can move up a 2 node den khi nao parent cua ca 2 gap nhau la xong
Steps:
1. Kiem tra do cao cua g va h
2. Move up node co do cao hon de 2 node nay cung do cao (vi ta di lan tung buoc 1)
3. Di len tang buoc 1 su dung link to parent
4. Kiem tra g.parent === h.parent khong neu co tra ve g.parent
5. Neu khong move up va loop
6. Ta dam bao se luon luon co parent cua ca 2 node chinh la root

Cach 2. BinaryTree co parent node
Ta nhan thay la, to tien dau tien chua ca g, h se o tren path cua g de den root.
Thay vi move ca 2 len, ta chi can di theo duong cua g, va tim xem cac duong la anh em cua g.parent co duong nao chua h hay khong. Neu khong ta move len cao va tim tiep
Steps:
1. Kiem tra root cover g, hay root cover h hay khong neu khong thi tra ve -1 (error)
2. Gan sibling => anh em cua g
3. Gan parent = g.parent
4. kiem tra sibling co chua h hay khong?
5. Neu chua h thi tra ve parent, neu khong lap lai
6. sibling => sibling cua parent
7. parent => tang 1 bac = parent.parent
8. Cuoi cung tra ve parent

Cach 3. Khong co node den parent
Gia su g va h deu co trong BT.Ta can tim ra dac diem thuoc tinh de tim g, h
To tien chung cua g, h de co dac diem la, g/h phai o nhanh ben trai, node con lai se phai o nhanh ben con lai.
Vi neu nhu g/h cung o tren 1 nhanh (n.left) thi n.left moi la to tien chung dau tien cua g, h.
Ta suy ra y tuong la neu nhu cover(n.left, h) && cover(n.left, g) => tim tiep trong n.left
Tuong tu cho n.right.
Neu nhu khong thi n chinh la to tien chung dau tien

Steps:
1. Kiem tra cover(root, g), cover(root, h) neu 1 trong 2 khong co trong root thi tra ve -1 (error)
2. Kiem tra node.left co chua g va h hay khong neu co de quy tiep cho root.left
3. Kiem tra node.right co chua g va h hay khong neu co de quy tiep cho root.right
4. Tra ve node

Cach 4. Toi uu hoa cach 3
Trong cach 3 ta nhan thay dau tien ta tim root.left va root.right. Trong root.left ta lai tim het cac node o duoi,sau do ta lai tiep tuc voi root.left (duyet root.left.left va root.left.right) cu nhu vay cho den khi tim duoc to tien chung dau tien. Co nhieu phep tinh lap lai o day ma thuc te ta chi can duyen cac node 1 lan duy nhat neu nhu co cac nao do de "noi bot" gia tri o cac node duoi len node tren chinh la phep tra ve cua de quy. Tu do ta co cac buoc toi uu hon cua step 3 buoc ham de quy
1. Ham tra ve g neu nhu nhanh root chua g (ma khong chua h)
2. Ham tra ve h neu nhu nhanh root chua h (ma khong chua g)
3. Tra ve null neu nhu root khong chua g, h
4. tra ve common ancestor cua g, h (neu nhu x la to tien cua nhanh root.left, y la to tien cua nhanh root.right thi x chinh la dap an can tim)

Ta co 4 kha nang xay ra voi ket qua tra ve cua ham findCommonAncestor
1. null
2. g
3. h
4. x (x !== g && x !== h) chinh la common ancestor

Tu do ta se co bang duoi cho (rx = commonAncestor(root.left), rx = commonAncestor(root.rigt))

| rx/ry | null | g    | h    | x    |
|-------+------+------+------+------|
| null  | null | ?    | ?    | ?    |
| g     | ?    | root | root | root |
| h     | ?    | root | root | root |
| x     | ?    | root | root | x    |

Cung voi root (node dang duyet), node g, node h, ta co 6 kha nang:
1. root === undefined => da duyet het => tra ve undefined
2. root === g && root === h => g, h trung nhau ta tra ve root
3. goi x la kq tra ve cua phep de quy (root.left, g, h)
4. goi y la kq tra ve cua phep de quy (root.right, g, h)
5. neu nhu x !== null && x !== g && x !== h => da tim duoc to tien tra ve x
6. neu nhu y !== null && y !== g && y !== h => da tim duoc to tien tra ve y
7. x !== null && y !== null => da tim duoc o root.left va root.right => tra ve root
8. root === g || root === h => tra ve root
9. else tra ve gia tri nao khong null

Cach nay work nhung khong phan biet duoc 2 truong hop:
1. la h o duoi nhanh g (hoac g o duoi nhanh h)
2. g la child nhung h thi khong phai

Do do thay vi chi tra ve node ta can them dieu kien do co phai la ancoestor hay khong

* Test va fix bug neu co

#+BEGIN: clocktable :scope file :maxlevel 2
#+CAPTION: Clock summary at [2018-08-07 Tue 22:10]
| Headline     | Time   |
|--------------+--------|
| *Total time* | *0:00* |
#+END:
